char * monitorHtml= "<html>\n"
"<head>\n"
"<title>MTConnect Monitor Javascript </title>\n"
"<meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\">\n"
"<style>\n"
"P \n"
"{ \n"
"	font-family: Verdana,sans-serif;\n"
"	FONT-SIZE: 70%; \n"
"	LINE-HEIGHT: 12pt;\n"
"	MARGIN-BOTTOM: 0px; \n"
"	MARGIN-LEFT: 10px; \n"
"	MARGIN-TOP: 10px;\n"
"}\n"
"\n"
"H1 \n"
"{ \n"
"	BACKGROUND-COLOR: #003366; \n"
"	BORDER-BOTTOM: #336699 6px solid; \n"
"	COLOR: #ffffff; \n"
"	FONT-SIZE: 130%;\n"
"	FONT-WEIGHT: normal;\n"
"	MARGIN: 0em 0em 0em -20px; \n"
"	PADDING-BOTTOM: 8px;\n"
"	PADDING-LEFT: 30px; \n"
"	PADDING-TOP: 16px \n"
"}\n"
"table {\n"
" 	BACKGROUND-COLOR: #f0f0e0; \n"
"	BORDER-BOTTOM: #ffffff 0px solid; \n"
"	BORDER-COLLAPSE: collapse;\n"
"	BORDER-LEFT: #ffffff 0px solid;\n"
"	BORDER-RIGHT: #ffffff 0px solid;\n"
"	BORDER-TOP: #ffffff 0px solid; \n"
"	FONT-SIZE: 70%;\n"
"	MARGIN-LEFT: 10px\n"
"  }\n"
"\n"
"td { \n"
"	BACKGROUND-COLOR: #e7e7ce; \n"
"	BORDER-BOTTOM: #ffffff 1px solid;\n"
"	BORDER-LEFT: #ffffff 1px solid; \n"
"	BORDER-RIGHT: #ffffff 1px solid;\n"
"	BORDER-TOP: #ffffff 1px solid;\n"
"	PADDING-LEFT: 3px \n"
"  } \n"
"th {\n"
"	BACKGROUND-COLOR: #cecf9c;\n"
"	BORDER-BOTTOM: #ffffff 1px solid;\n"
"	BORDER-LEFT: #ffffff 1px solid;\n"
"	BORDER-RIGHT: #ffffff 1px solid;\n"
"	BORDER-TOP: #ffffff 1px solid;\n"
"	COLOR: #000000;\n"
"	FONT-WEIGHT: bold \n"
"  }\n"
"</style>\n"
"<script type=\"text/javascript\">\n"
"\n"
"function Lookup(key) {\n"
"    return (this[key]);\n"
"}\n"
"\n"
"function Add() {\n"
"    for (c = 0; c < Add.arguments.length; c += 2) {\n"
"        // Add the property \n"
"        this[Add.arguments[c]] = Add.arguments[c + 1];\n"
"        // And add it to the keys array \n"
"        this.Keys[this.Keys.length] = Add.arguments[c];\n"
"    }\n"
"}\n"
"\n"
"function Dictionary() {\n"
"    this.Add = Add;\n"
"    this.Lookup = Lookup;\n"
"    this.Keys = new Array();\n"
"}\n"
"\n"
"function SetDiv(id, str) {\n"
"    var x = document.getElementById(id);\n"
"    x.innerHtml = str;\n"
"}\n"
"\n"
"\n"
"function nsResolver(prefix) {\n"
"    switch (prefix) {\n"
"        case 'xsi':\n"
"            return 'http://www.w3.org/2001/XMLSchema-instance';\n"
"        case 'm':\n"
"            return 'http://www.mtconnect.org/schemas/MTConnectStreams_1.2.xsd';\n"
"        default:\n"
"            return 'http://www.mtconnect.org/schemas/MTConnectStreams_1.2.xsd';\n"
"    }\n"
"}\n"
"\n"
"\n"
"function updatetable(machine) {\n"
"    if(machine===\"\") machine=\"127.0.0.1\";\n"
"    var tmp = \"\";\n"
"    \n"
"    var xhttp;\n"
"   if(window.XMLHttpRequest){\n"
"                    xhttp = new XMLHttpRequest();\n"
"                }\n"
"                else{\n"
"                    xhttp= new ActiveXObject(\"Micrsoft.XMLHTTP\");\n"
"                }\n"
"\n"
"    xhttp.preserveWhiteSpace = true;\n"
"    xhttp.open(\"GET\", \"http://\" + machine + \"/current\", false);\n"
"    xhttp.send();\n"
"    \n"
"    if (xhttp.status === 200) {\n"
"    // console.log(xhttp.responseText);\n"
"    }\n"
"    \n"
"    var xmlDoc1 = xhttp.responseXML;\n"
"    \n"
"    var rootNode = xmlDoc1.documentElement;\n"
"    \n"
"    var items = new Array();\n"
"    // Tried every combination of xpath - sigh\n"
"    //items[0] = \"/*[local-name()='ComponentStream']/*[local-name()='Samples']\";\n"
"    //items[1] = \"/*[local-name()='ComponentStream']/*[local-name()='Events']\";\n"
"    //items[2] = \"/*[local-name()='ComponentStream']/*[local-name()='Condition']\";\n"
"    \n"
"    \n"
"    var nodes=[];\n"
"    if(window.XPathResult)\n"
"    {\n"
"      var tnodes = xmlDoc1.evaluate(\"/*/*/*[local-name()='DeviceStream']\", rootNode, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);\n"
"     for (var i = 0; i < tnodes.snapshotLength; i++) {\n"
"           nodes.push(tnodes.snapshotItem(i));\n"
"     }\n"
"    }\n"
"    else\n"
"    {\n"
"      var tnodes = rootNode.selectNodes(\"//DeviceStream\");\n"
"       for (var i = 0; i < tnodes.length; i++) {\n"
"           nodes.push(tnodes[i]);\n"
"       }\n"
"    }\n"
"    \n"
"\n"
"    for (var i = 0; i < nodes.length; i++) {\n"
"    //for (var i = 0; i < nodes.snapshotLength; i++) {\n"
"        var userDict = new Dictionary();\n"
"        var node = nodes[i];\n"
"        tmp = tmp + \"<P>\" + node.getAttribute(\"name\");\n"
"        \n"
"        items[0] = \"Samples\";\n"
"        items[1] = \"Events\";\n"
"        items[2] = \"Condition\";\n"
"        \n"
"        for (var ii = 0; ii < 3; ii++) {\n"
"            var samples = [];\n"
"            //samples = xmlDoc1.evaluate(items[ii], node, null, XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE, null);\n"
"            \n"
"            var componentStream = node.getElementsByTagName(\"ComponentStream\");\n"
"            \n"
"            for (var j = 0; j < componentStream.length; j++) \n"
"            {\n"
"                var tags = componentStream[j].getElementsByTagName(items[ii]);\n"
"                for (var jj = 0; jj < tags.length; jj++)\n"
"                    samples.push(tags[jj]);\n"
"            }\n"
"            \n"
"            for (var j = 0; j < samples.length; j++) {\n"
"                var sample = samples[j];\n"
"                for (var k = 0; k < sample.childNodes.length; k++) {\n"
"                    var child = sample.childNodes[k];\n"
"                    if (child.nodeType == 3)\n"
"                        continue;\n"
"                    if (child.getAttribute(\"name\") != null) {\n"
"                        userDict.Add(child.getAttribute(\"name\"), (window.XPathResult)? child.textContent: child.text )\n"
"                    } else if (child.getAttribute(\"dataItemd\") != null) {\n"
"                        userDict.Add(child.getAttribute(\"dataItemId\"), (window.XPathResult)? child.textContent: child.text)\n"
"                    }\n"
"                }\n"
"            }\n"
"        }\n"
"        tmp = tmp + \"<TABLE> \";\n"
"        var keys = userDict.Keys;\n"
"        keys.sort(function(x, y) {\n"
"            var a = String(x).toUpperCase();\n"
"            var b = String(y).toUpperCase();\n"
"            if (a > b)\n"
"                return 1;\n"
"            if (a < b)\n"
"                return -1;\n"
"            return 0;\n"
"        });\n"
"        for (var k = 0; k < keys.length; k++) {\n"
"            tmp = tmp + \"<tr><td>\" + keys[k] + \"</td> <td>\" + userDict.Lookup(keys[k]) + \"</td> </tr>\";\n"
"        }\n"
"        tmp = tmp + \"</TABLE> \";\n"
"    }\n"
"    return tmp;\n"
"}\n"
"\n"
"function timedRefresh(timeoutPeriod) {\n"
"    setTimeout(\"location.reload(true);\", timeoutPeriod);\n"
"}\n"
"\n"
"function myTimer() {\n"
"    var machine = window.location.host;\n"
"    var x = updatetable(machine);\n"
"    document.getElementById(\"Device\").innerHTML = x;\n"
"}\n"
"</script>\n"
"</head>\n"
"<body>\n"
"<h1> MTConnect Readings</H1>\n"
"<div id=\"Device\"> \n"
"Table\n"
"</div>\n"
"<script type=\"text/javascript\">\n"
"myTimer();\n"
"window.setInterval(myTimer,2000);\n"
"</script>\n"
"</body>\n"
"</html>";
